@page "/store"
@page "/store/{currentPage:int}"

@inject IDbContextFactory<OneShotShopContext> ContextFactory
@inject NavigationManager NavManager
@inject ILogger<ItemService> itemLogger
@using Microsoft.EntityFrameworkCore;
@using ShellAndNecklaceAPI
@using ShellAndNecklaceAPI.Data
@using ShellAndNecklaceAPI.Data.DTOs;
@using ShellAndNecklaceAPI.Services;




<PageTitle>Shop</PageTitle>
<link rel="stylesheet" href="Shop.css" />

<h3>Shop</h3>

<ul class="pagination mt-3">
    <li class="page-item @(currentPage == 1? "disabled" : "")">
        <a class="page-link" href="/store/@(currentPage - 1)">Previous</a>
    </li>
    @for (int i = 1; i <= totalPages; i++)
    {
        <li class="page-item @(currentPage == i? "active" : "")">
            <a class="page-link" href="/store/@i">@i</a>
        </li>
    }
    <li class="page-item @(currentPage == totalPages? "disabled" : "")">
        <a class="page-link" href="/store/@(currentPage + 1)">Next</a>
    </li>
</ul>

<select @bind="sortBy">
    <option value="name">Name</option>
    <option value="price">Price</option>
</select>

<select @bind="sortOrder">
    <option value="asc">Ascending</option>
    <option value="desc">Descending</option>
</select>

<button @onclick="HandleSortChangeAsync">Apply Sort</button>
<Div Class="shop-items">

@*Need style for each status, pagination, automatic making cards*@
    @if (queriedItems != null && queriedItems.Any())
    {
        @foreach (var item in queriedItems)
        {
            @*<div class="card" style="width: 18rem;">
                <img class="card-img-top" src="@item.PicString" alt="picture of @item.Name">
                <div class="card-body">
                    <h5 class="card-title">@item.Name</h5>
                    <p class="card-text">Description</p>
                    <a href="/store/item/@item.Name" class="btn btn-primary">Check out @item.Name</a>
                </div>
            </div>*@

            <div class="card" style="width: 18rem;">
                <img class="card-img-top" src="@item.PicString" alt="picture of @item.Name">
                <div class="card-body">
                    <h5 class="card-title">@item.Name</h5>
                    <p class="card-text">@item.PriceBase</p>
                    <p class="card-text">@item.Description</p>
                    <a href="/store/item/@item.Name" class="btn btn-primary">Check out @item.Name</a>
                </div>
            </div>
        }
    }
    else
    {
        <p>No items found. Please check back later.</p>
    }


</Div>
<ul class="pagination mt-3">
    <li class="page-item @(currentPage == 1? "disabled" : "")">
        <a class="page-link" href="/store/@(currentPage - 1)">Previous</a>
    </li>
    @for (int i = 1; i <= totalPages; i++) {
        <li class="page-item @(currentPage == i? "active" : "")">
            <a class="page-link" href="/store/@i">@i</a>
        </li>
    }
    <li class="page-item @(currentPage == totalPages? "disabled" : "")">
        <a class="page-link" href="/store/@(currentPage + 1)">Next</a>
    </li>
</ul>

@code {
    [Parameter]
    public int currentPage { get; set; } = 0;

    private IEnumerable<ItemDTO> queriedItems { get; set; }
    private IEnumerable<ItemDTO> itemEnum { get; set; }
    private int totalPages { get; set; }
    private string sortBy = "name"; // Default sorting by name
    private string sortOrder = "asc"; // Default sorting order
    private int itemsPerPage { get; set; } = 10;


    protected override async Task OnInitializedAsync()
    {
        var context = ContextFactory.CreateDbContext();
        ItemService itemService = new ItemService(itemLogger, context);
        itemEnum = await itemService.GetAll();
        await FetchItemsAsync();
    }

    private async Task FetchItemsAsync()
    {

        try
        {
            var itemContext = ContextFactory.CreateDbContext();
            if (itemContext.Items.Any())
            {
                //IQueryable<Item> query = itemContext.Items.OrderBy(item => item.Itemname);

                queriedItems = itemEnum
                                            .OrderBy(item => item.Name)
                                            .Skip((currentPage - 1) * itemsPerPage)
                                            .Take(itemsPerPage);

                if (sortBy == "name")
                {
                    queriedItems = sortOrder == "asc" ? queriedItems.OrderBy(item => item.Name) : queriedItems.OrderByDescending(item => item.Name);
                }
                else if (sortBy == "price")
                {
                    queriedItems = sortOrder == "asc" ? queriedItems.OrderBy(item => item.PriceBase) : queriedItems.OrderByDescending(item => item.PriceBase);
                }
            }
            else
            {
                totalPages = 1;
            }
            if (currentPage <= 0)
            {
                NavManager.NavigateTo("/store/1");
                return;
            }
            else { }
            var itemCount = itemEnum.Count();
            if (itemCount < 1 || itemCount == null)
            {
                totalPages = 1;
            }
            else
            {
                totalPages = (int)Math.Ceiling((decimal)itemCount / itemsPerPage);
            }

            if (currentPage > totalPages)
            {
                currentPage = totalPages;
                NavManager.NavigateTo($"/store/{totalPages}");
                return;
            }
            else { }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error:{e.Message}");
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        await FetchItemsAsync();
    }

    private async Task HandleSortChangeAsync()
    {
        await FetchItemsAsync(); // Re-fetch items based on the updated sorting criteria
        StateHasChanged(); // Refresh UI
    }
}

@* 
drawing with mouse:
        canvas html tag
        javascript:
        getcontext
        mouse down event *@