@page "/store/item/{itemname}"

@inject IDbContextFactory<OneShotShopContext> ContextFactory
@inject NavigationManager NavManager
@inject ILogger<ItemService> itemLogger
@inject ILogger<CartService> cartLogger
@using Microsoft.EntityFrameworkCore;
@using ShellAndNecklaceAPI
@using ShellAndNecklaceAPI.Data
@using ShellAndNecklaceAPI.Data.DTOs;
@using ShellAndNecklaceAPI.Services;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor _httpContextAccessor;
@inject HttpClient Http;


@if (initialized) {
        <PageTitle>@itemname</PageTitle>
    <Div Class="bodyContents backgroundColoring">
        
            <h3>@itemname</h3>
            <img class="floated-image AboutImage owner-icon " src="@pageitem.PicString" alt="@pageitem.Name" />
            <EditForm Model = "@order" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator/>
                <div class="mb-3 floatleft">
                    <Label for ="Quantity" Class="form-label">Quantity</Label>
                    <InputSelect id="Quantity" class="form-select" @bind-Value="order.Quantity">
                        @for (int i = 1; i <= 10; i++) {
                            <option value="@i">@i</option>
                        }
                    </InputSelect>
                </div>
            <p class="padding-wrapping backgroundColoring description-text">$@pageitem.PriceBase each</p>
            <p class="padding-wrapping backgroundColoring description-text">@pageitem.Description</p>
            <Div Class="clear"></Div>

                <Div Class="mb-3">
                    <Label for="Customization" Class="form-label">Customization Requests</Label>
                    <InputText id="Customization" class="form-control" @bind-Value= "order.Notes"></InputText>
                </Div>

                <button type="submit" class="btn btn-primary">Add To Cart</button>
            </EditForm>
        </Div>

    @if (addedtocart)
    {
        <p>Item added to cart!</p>
    }
    }


@code {
    [Parameter]
    public string itemname { get; set; } = "Single Winchester Gold";
    private ClaimsPrincipal UserForEmail;
    private string Email;
    private bool initialized = false, addedtocart = false;

    private ItemService DBservice;
    private CartService cartService;
    ItemDTO pageitem; 
    private PurchasedItemDTO order = new PurchasedItemDTO(); // Initialize the order object


    private async Task HandleValidSubmit()
    {
        var cartitem = new CartDTO()
            {
                itemname = order.Name,
                quantity = order.Quantity,
                actualprice = order.Price,
                email = Email
            };

        await cartService.AddToCart(cartitem);
    }

    private async Task HandleInvalidSubmit() { }


    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        try
        {
            UserForEmail = _httpContextAccessor.HttpContext.User;

            var givenEmail =
                _httpContextAccessor.HttpContext.User
                .FindFirst(ClaimTypes.Email);
            if (givenEmail != null)
            {
                Email = givenEmail.Value;
            }
            else
            {
                Email = "zanerclegg@gmail.com";
            }
        }
        catch
        {
            
        }

        var context = ContextFactory.CreateDbContext();
        DBservice = new ItemService(itemLogger, context);
        cartService = new CartService(cartLogger, context);
        pageitem = await DBservice.Get(itemname);
        initialized = true;
    }



}
